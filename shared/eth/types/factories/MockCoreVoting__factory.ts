/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MockCoreVoting } from "../MockCoreVoting";

export class MockCoreVoting__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCoreVoting> {
    return super.deploy(overrides || {}) as Promise<MockCoreVoting>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockCoreVoting {
    return super.attach(address) as MockCoreVoting;
  }
  connect(signer: Signer): MockCoreVoting__factory {
    return super.connect(signer) as MockCoreVoting__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCoreVoting {
    return new Contract(address, _abi, signerOrProvider) as MockCoreVoting;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approvedVaults",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "bool",
        name: "what",
        type: "bool",
      },
    ],
    name: "setVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063627f66c61461003b578063af7a060c14610076575b600080fd5b6100746100493660046100ea565b6001600160a01b03919091166000908152602081905260409020805460ff1916911515919091179055565b005b6100996100843660046100c9565b60006020819052908152604090205460ff1681565b604051901515815260200160405180910390f35b80356001600160a01b03811681146100c457600080fd5b919050565b6000602082840312156100da578081fd5b6100e3826100ad565b9392505050565b600080604083850312156100fc578081fd5b610105836100ad565b915060208301358015158114610119578182fd5b80915050925092905056fea264697066735822122097d4a30daa3b73214ffc850d196cd9997f7f6dc88c098a18fd786b4029660afe64736f6c63430008040033";
