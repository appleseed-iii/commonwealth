/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Reverter } from "../Reverter";

export class Reverter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Reverter> {
    return super.deploy(overrides || {}) as Promise<Reverter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Reverter {
    return super.attach(address) as Reverter;
  }
  connect(signer: Signer): Reverter__factory {
    return super.connect(signer) as Reverter__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reverter {
    return new Contract(address, _abi, signerOrProvider) as Reverter;
  }
}

const _abi = [
  {
    inputs: [],
    name: "fail",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50606c80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a9cc471814602d575b600080fd5b6034600080fd5b00fea2646970667358221220e2cd68302d50d35af7d2ae9346081ddd4086a22251123088b5d3f1918aaf129864736f6c63430008040033";
