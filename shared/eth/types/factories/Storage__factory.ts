/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Storage } from "../Storage";

export class Storage__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Storage> {
    return super.deploy(overrides || {}) as Promise<Storage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Storage {
    return super.attach(address) as Storage;
  }
  connect(signer: Signer): Storage__factory {
    return super.connect(signer) as Storage__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Storage {
    return new Contract(address, _abi, signerOrProvider) as Storage;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "typeString",
        type: "string",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "getPtr",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61025b61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806387ec29271461003a575b600080fd5b61004d610048366004610148565b61005f565b60405190815260200160405180910390f35b6000808360405160200161007391906101fc565b604051602081830303815290604052805190602001209050600081846040516020016100a09291906101e2565b60408051808303601f19018152919052805160209091012095945050505050565b600082601f8301126100d1578081fd5b813567ffffffffffffffff808211156100ec576100ec61020f565b604051601f8301601f19908116603f011681019082821181831017156101145761011461020f565b8160405283815286602085880101111561012c578485fd5b8360208701602083013792830160200193909352509392505050565b6000806040838503121561015a578182fd5b823567ffffffffffffffff80821115610171578384fd5b61017d868387016100c1565b93506020850135915080821115610192578283fd5b5061019f858286016100c1565b9150509250929050565b60008151815b818110156101c957602081850181015186830152016101af565b818111156101d75782828601525b509290920192915050565b82815260006101f460208301846101a9565b949350505050565b600061020882846101a9565b9392505050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212200c7375adb2769968e6c8eb03ed5c8e5c2b290c0d6391378db18a167addd1127764736f6c63430008040033";
