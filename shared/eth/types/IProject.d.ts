/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IProjectInterface extends ethers.utils.Interface {
  functions: {
    "back(address,uint256)": FunctionFragment;
    "backWithETH()": FunctionFragment;
    "curate(address,uint256)": FunctionFragment;
    "curateWithETH()": FunctionFragment;
    "curatorFee()": FunctionFragment;
    "deadline()": FunctionFragment;
    "funded()": FunctionFragment;
    "getAcceptedTokens()": FunctionFragment;
    "getBToken(address)": FunctionFragment;
    "getCToken(address)": FunctionFragment;
    "initialize(tuple,address[],address[],uint256,uint256,uint256)": FunctionFragment;
    "lockedWithdraw()": FunctionFragment;
    "redeemBToken(address,uint256)": FunctionFragment;
    "redeemCToken(address,uint256)": FunctionFragment;
    "threshold()": FunctionFragment;
    "totalFunding()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "back",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "backWithETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "curateWithETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curatorFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(functionFragment: "funded", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAcceptedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBToken", values: [string]): string;
  encodeFunctionData(functionFragment: "getCToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        id: BigNumberish;
        name: BytesLike;
        ipfsHash: BytesLike;
        cwUrl: BytesLike;
        creator: string;
      },
      string[],
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemBToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemCToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFunding",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "back", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "backWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "curateWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curatorFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAcceptedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemBToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Curate(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "Failed()": EventFragment;
    "Succeeded()": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Curate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Failed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Succeeded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class IProject extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IProjectInterface;

  functions: {
    back(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "back(address,uint256)"(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    backWithETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "backWithETH()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curate(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "curate(address,uint256)"(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curateWithETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "curateWithETH()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curatorFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "curatorFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    "deadline()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    funded(overrides?: CallOverrides): Promise<[boolean]>;

    "funded()"(overrides?: CallOverrides): Promise<[boolean]>;

    getAcceptedTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getAcceptedTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    getBToken(_token: string, overrides?: CallOverrides): Promise<[string]>;

    "getBToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCToken(_token: string, overrides?: CallOverrides): Promise<[string]>;

    "getCToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _metaData: {
        id: BigNumberish;
        name: BytesLike;
        ipfsHash: BytesLike;
        cwUrl: BytesLike;
        creator: string;
      },
      _acceptedTokens: string[],
      _nominations: string[],
      _threshold: BigNumberish,
      _deadline: BigNumberish,
      _curatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize((uint256,bytes32,bytes32,bytes32,address),address[],address[],uint256,uint256,uint256)"(
      _metaData: {
        id: BigNumberish;
        name: BytesLike;
        ipfsHash: BytesLike;
        cwUrl: BytesLike;
        creator: string;
      },
      _acceptedTokens: string[],
      _nominations: string[],
      _threshold: BigNumberish,
      _deadline: BigNumberish,
      _curatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedWithdraw(overrides?: CallOverrides): Promise<[boolean]>;

    "lockedWithdraw()"(overrides?: CallOverrides): Promise<[boolean]>;

    redeemBToken(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemBToken(address,uint256)"(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemCToken(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemCToken(address,uint256)"(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "threshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFunding(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalFunding()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  back(
    _token: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "back(address,uint256)"(
    _token: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  backWithETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "backWithETH()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curate(
    _token: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "curate(address,uint256)"(
    _token: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curateWithETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "curateWithETH()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curatorFee(overrides?: CallOverrides): Promise<BigNumber>;

  "curatorFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  "deadline()"(overrides?: CallOverrides): Promise<BigNumber>;

  funded(overrides?: CallOverrides): Promise<boolean>;

  "funded()"(overrides?: CallOverrides): Promise<boolean>;

  getAcceptedTokens(overrides?: CallOverrides): Promise<string[]>;

  "getAcceptedTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getBToken(_token: string, overrides?: CallOverrides): Promise<string>;

  "getBToken(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getCToken(_token: string, overrides?: CallOverrides): Promise<string>;

  "getCToken(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _metaData: {
      id: BigNumberish;
      name: BytesLike;
      ipfsHash: BytesLike;
      cwUrl: BytesLike;
      creator: string;
    },
    _acceptedTokens: string[],
    _nominations: string[],
    _threshold: BigNumberish,
    _deadline: BigNumberish,
    _curatorFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize((uint256,bytes32,bytes32,bytes32,address),address[],address[],uint256,uint256,uint256)"(
    _metaData: {
      id: BigNumberish;
      name: BytesLike;
      ipfsHash: BytesLike;
      cwUrl: BytesLike;
      creator: string;
    },
    _acceptedTokens: string[],
    _nominations: string[],
    _threshold: BigNumberish,
    _deadline: BigNumberish,
    _curatorFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedWithdraw(overrides?: CallOverrides): Promise<boolean>;

  "lockedWithdraw()"(overrides?: CallOverrides): Promise<boolean>;

  redeemBToken(
    _token: string,
    _valueToRemove: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemBToken(address,uint256)"(
    _token: string,
    _valueToRemove: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemCToken(
    _token: string,
    _valueToRemove: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemCToken(address,uint256)"(
    _token: string,
    _valueToRemove: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  "threshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalFunding(overrides?: CallOverrides): Promise<BigNumber>;

  "totalFunding()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    back(
      _token: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "back(address,uint256)"(
      _token: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    backWithETH(overrides?: CallOverrides): Promise<boolean>;

    "backWithETH()"(overrides?: CallOverrides): Promise<boolean>;

    curate(
      _token: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "curate(address,uint256)"(
      _token: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    curateWithETH(overrides?: CallOverrides): Promise<boolean>;

    "curateWithETH()"(overrides?: CallOverrides): Promise<boolean>;

    curatorFee(overrides?: CallOverrides): Promise<BigNumber>;

    "curatorFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    "deadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    funded(overrides?: CallOverrides): Promise<boolean>;

    "funded()"(overrides?: CallOverrides): Promise<boolean>;

    getAcceptedTokens(overrides?: CallOverrides): Promise<string[]>;

    "getAcceptedTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getBToken(_token: string, overrides?: CallOverrides): Promise<string>;

    "getBToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getCToken(_token: string, overrides?: CallOverrides): Promise<string>;

    "getCToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _metaData: {
        id: BigNumberish;
        name: BytesLike;
        ipfsHash: BytesLike;
        cwUrl: BytesLike;
        creator: string;
      },
      _acceptedTokens: string[],
      _nominations: string[],
      _threshold: BigNumberish,
      _deadline: BigNumberish,
      _curatorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize((uint256,bytes32,bytes32,bytes32,address),address[],address[],uint256,uint256,uint256)"(
      _metaData: {
        id: BigNumberish;
        name: BytesLike;
        ipfsHash: BytesLike;
        cwUrl: BytesLike;
        creator: string;
      },
      _acceptedTokens: string[],
      _nominations: string[],
      _threshold: BigNumberish,
      _deadline: BigNumberish,
      _curatorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockedWithdraw(overrides?: CallOverrides): Promise<boolean>;

    "lockedWithdraw()"(overrides?: CallOverrides): Promise<boolean>;

    redeemBToken(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "redeemBToken(address,uint256)"(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeemCToken(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "redeemCToken(address,uint256)"(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    "threshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFunding(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFunding()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;

    "withdraw()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Curate(
      sender: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; token: string; amount: BigNumber }
    >;

    Deposit(
      sender: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; token: string; amount: BigNumber }
    >;

    Failed(): TypedEventFilter<[], {}>;

    Succeeded(): TypedEventFilter<[], {}>;

    Withdraw(
      sender: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    back(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "back(address,uint256)"(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    backWithETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "backWithETH()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curate(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "curate(address,uint256)"(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curateWithETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "curateWithETH()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curatorFee(overrides?: CallOverrides): Promise<BigNumber>;

    "curatorFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    "deadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    funded(overrides?: CallOverrides): Promise<BigNumber>;

    "funded()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAcceptedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getAcceptedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getCToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _metaData: {
        id: BigNumberish;
        name: BytesLike;
        ipfsHash: BytesLike;
        cwUrl: BytesLike;
        creator: string;
      },
      _acceptedTokens: string[],
      _nominations: string[],
      _threshold: BigNumberish,
      _deadline: BigNumberish,
      _curatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize((uint256,bytes32,bytes32,bytes32,address),address[],address[],uint256,uint256,uint256)"(
      _metaData: {
        id: BigNumberish;
        name: BytesLike;
        ipfsHash: BytesLike;
        cwUrl: BytesLike;
        creator: string;
      },
      _acceptedTokens: string[],
      _nominations: string[],
      _threshold: BigNumberish,
      _deadline: BigNumberish,
      _curatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedWithdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBToken(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemBToken(address,uint256)"(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemCToken(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemCToken(address,uint256)"(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    "threshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFunding(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFunding()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    back(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "back(address,uint256)"(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    backWithETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "backWithETH()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curate(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "curate(address,uint256)"(
      _token: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curateWithETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "curateWithETH()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curatorFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curatorFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deadline()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    funded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "funded()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAcceptedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAcceptedTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _metaData: {
        id: BigNumberish;
        name: BytesLike;
        ipfsHash: BytesLike;
        cwUrl: BytesLike;
        creator: string;
      },
      _acceptedTokens: string[],
      _nominations: string[],
      _threshold: BigNumberish,
      _deadline: BigNumberish,
      _curatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize((uint256,bytes32,bytes32,bytes32,address),address[],address[],uint256,uint256,uint256)"(
      _metaData: {
        id: BigNumberish;
        name: BytesLike;
        ipfsHash: BytesLike;
        cwUrl: BytesLike;
        creator: string;
      },
      _acceptedTokens: string[],
      _nominations: string[],
      _threshold: BigNumberish,
      _deadline: BigNumberish,
      _curatorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedWithdraw()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemBToken(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemBToken(address,uint256)"(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemCToken(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemCToken(address,uint256)"(
      _token: string,
      _valueToRemove: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "threshold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFunding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalFunding()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
