/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MockTokenLogic } from "../MockTokenLogic";

export class MockTokenLogic__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockTokenLogic> {
    return super.deploy(_owner, overrides || {}) as Promise<MockTokenLogic>;
  }
  getDeployTransaction(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  attach(address: string): MockTokenLogic {
    return super.attach(address) as MockTokenLogic;
  }
  connect(signer: Signer): MockTokenLogic__factory {
    return super.connect(signer) as MockTokenLogic__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTokenLogic {
    return new Contract(address, _abi, signerOrProvider) as MockTokenLogic;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
    ],
    name: "readStorage",
    outputs: [
      {
        internalType: "bytes32",
        name: "data",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "data",
        type: "bytes32",
      },
    ],
    name: "writeStorage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161074d38038061074d83398101604081905261002f916100f9565b60006100616040518060400160405280600581526020016437bbb732b960d91b81525061008160201b6102ff1760201c565b905061007a82826100dc60201b61035a1790919060201c565b505061016c565b6000807f421683f821a0574472445355be6d2b769119e8515f8376a1d7878523dfdecf7b9050600081846040516020016100bc929190610127565b60408051601f198184030181529190528051602090910120949350505050565b81546001600160a01b0319166001600160a01b0391909116179055565b60006020828403121561010a578081fd5b81516001600160a01b0381168114610120578182fd5b9392505050565b82815260008251815b8181101561014c57602081860181015185830182015201610130565b8181111561015d5782602083860101525b50919091016020019392505050565b6105d28061017b6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635b86f5991161005b5780635b86f599146100c357806370a08231146100d6578063a9059cbb146100e9578063e10af4ad146100fc57600080fd5b806318160ddd146100825780632cab83351461009c57806340c10f19146100ae575b600080fd5b61008a61010e565b60405190815260200160405180910390f35b61008a6100aa3660046104d9565b5490565b6100c16100bc3660046104b0565b610129565b005b6100c16100d13660046104b0565b610208565b61008a6100e436600461048f565b61026f565b6100c16100f73660046104b0565b61029a565b6100c161010a3660046104f1565b9055565b600080610119610377565b9050610123815490565b91505090565b60006101336103aa565b905061014681546001600160a01b031690565b6001600160a01b0316336001600160a01b0316146101995760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015260640160405180910390fd5b60006101a3610377565b905060006101af6103d2565b905083816000876001600160a01b03166001600160a01b0316815260200190815260200160002060008282546101e59190610557565b909155505081546102006101f98683610557565b849061010a565b505050505050565b6000610212610377565b9050600061021e6103d2565b905082816000866001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102549190610557565b909155505081546102686101f98583610557565b5050505050565b60008061027a6103d2565b6001600160a01b0390931660009081526020939093525050604090205490565b60006102a46103d2565b336000908152602082905260408120805492935084929091906102c890849061056f565b90915550506001600160a01b038316600090815260208290526040812080548492906102f5908490610557565b9091555050505050565b6000807f421683f821a0574472445355be6d2b769119e8515f8376a1d7878523dfdecf7b90506000818460405160200161033a929190610512565b60408051601f198184030181529190528051602090910120949350505050565b81546001600160a01b0319166001600160a01b0391909116179055565b60006103a56040518060400160405280600b81526020016a746f74616c537570706c7960a81b8152506103fd565b905090565b60006103a56040518060400160405280600581526020016437bbb732b960d91b8152506102ff565b60006103a56040518060400160405280600881526020016762616c616e63657360c01b815250610438565b6000807fec13d6d12b88433319b64e1065a96ea19cd330ef6603f5f6fb685dde3959a32090506000818460405160200161033a929190610512565b6000807f57f81c1497fd9382c9a7940a80bdc573c8799f1d06648c835389d4f759c45c3a90506000818460405160200161033a929190610512565b80356001600160a01b038116811461048a57600080fd5b919050565b6000602082840312156104a0578081fd5b6104a982610473565b9392505050565b600080604083850312156104c2578081fd5b6104cb83610473565b946020939093013593505050565b6000602082840312156104ea578081fd5b5035919050565b60008060408385031215610503578182fd5b50508035926020909101359150565b82815260008251815b818110156105375760208186018101518583018201520161051b565b818111156105485782602083860101525b50919091016020019392505050565b6000821982111561056a5761056a610586565b500190565b60008282101561058157610581610586565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220cae5bd513e2d5325b8fe491deaf9ce80140e5b05ce65ce11ea370985ab516d0364736f6c63430008040033";
